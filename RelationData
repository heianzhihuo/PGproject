typedef struct RelationData {
    File		rd_fd; 		/* open file descriptor */
    int                 rd_nblocks;	/* number of blocks in rel */
    uint16		rd_refcnt; 	/* reference count */
    bool		rd_islocal; 	/* uses the local buffer mgr */
    bool		rd_isnailed; 	/* rel is nailed in cache */
    bool		rd_istemp;	/* rel is a temp rel */
    bool		rd_tmpunlinked;	/* temp rel already unlinked */
    Form_pg_am 		rd_am; 		/* AM tuple */
    Form_pg_class	rd_rel;		/* RELATION tuple */
    Oid			rd_id;		/* relations's object id */
    Pointer		lockInfo; 	/* ptr. to misc. info. */
    TupleDesc           rd_att;		/* tuple desciptor,元组描述符 */
    RuleLock		*rd_rules;	/* rewrite rules */
    IndexStrategy       rd_istrat;    
    RegProcedure*       rd_support;
} RelationData;


其中relation是通过函数RelationBuildDesc(RelationBuildDescInfo buildinfo)来创建的
，从而可以通过系统自动分配文件

RelationBuildDescInfo结构中，有一个字段可以区分不同的relation，这个字段可以确定文件

typedef struct RelationBuildDescInfo {
    int infotype;		/* lookup by id or by name */
#define INFO_RELID 1
#define INFO_RELNAME 2
    union {
	Oid info_id;	/* relation object id */
	char *info_name;	/* relation name */
    } i;
} RelationBuildDescInfo;


通过Relation和blocknumber获取Buffer
 ReadBuffer(relation, lastblock);
可以直接用relation创建一个buffer


如何设置和获取blocks
relation->rd_nblocks = smgrnblocks(relation->rd_rel->relsmgr, relation);
如何设置和获取rd_fd
relation->rd_fd = smgropen(relation->rd_rel->relsmgr, relation);












typedef struct HeapTupleData {

    unsigned int	t_len;		/* length of entire tuple */

    ItemPointerData	t_ctid;		/* current TID of this tuple */

    ItemPointerData	t_chain;	/* replaced tuple TID */

    Oid			t_oid;		/* OID of this tuple -- 4 bytes */

    CommandId		t_cmin;		/* insert CID stamp -- 2 bytes each */
    CommandId		t_cmax;		/* delete CommandId stamp */

    TransactionId	t_xmin;		/* insert XID stamp -- 4 bytes each */
    TransactionId	t_xmax;		/* delete XID stamp */

    AbsoluteTime	t_tmin;		/* time stamps -- 4 bytes each */
    AbsoluteTime	t_tmax;	

    int16		t_natts;	/* number of attributes */
    char		t_vtype;	/* not used - padding */

    char		t_infomask;	/* whether tuple as null or variable
					 * length attributes
					 */

    uint8		t_hoff;		/* sizeof tuple header */

    bits8		t_bits[MinHeapTupleBitmapSize / 8];
					/* bit map of domains */

    /* MORE DATA FOLLOWS AT END OF STRUCT */
} HeapTupleData;	

typedef HeapTupleData	*HeapTuple;




